#!/usr/bin/env /ESSArch/python27/bin/python
# -*- coding: UTF-8 -*-
'''
    ESSArch Tools - ESSArch is an Electronic Preservation Platform
    Copyright (C) 2005-2013  ES Solutions AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Contact information:
    Web - http://www.essolutions.se
    Email - essarch@essolutions.se
'''

from django.db import models
from django.contrib import admin
from django.utils.safestring import mark_safe
from django.forms.util import flatatt
from django import forms

import sys, datetime


# Agent Profiles
class AgentProfile(models.Model):
    entity      = models.CharField( max_length = 60, unique=True )
    value       = models.CharField( max_length = 70 )

    class Meta:
        ordering = ["entity"]

    def __unicode__(self):
        # create a unicode representation of this object
        return self.entity

    def get_value_array(self):
        # make an associative array of all fields  mapping the field
        # name to the current value of the field
        return { field.name: field.value_to_string(self)
                 for field in AgentProfile._meta.fields }


# Transfer Project Profiles
class TransferProjectProfile(models.Model):
    entity      = models.CharField( max_length = 60, unique=True )
    value       = models.CharField( max_length = 70 )

    class Meta:
        ordering = ["entity"]

    def __unicode__(self):
        # create a unicode representation of this object
        return self.entity

    def get_value_array(self):
        # make an associative array of all fields  mapping the field
        # name to the current value of the field
        return { field.name: field.value_to_string(self)
                 for field in TransferProjectProfile._meta.fields }


# Import Profiles
class ImportProfile(models.Model):
    entity      = models.CharField( max_length = 60, unique=True )
    value       = models.CharField( max_length = 70 )

    class Meta:
        ordering = ["entity"]

    def __unicode__(self):
        # create a unicode representation of this object
        return self.entity

    def get_value_array(self):
        # make an associative array of all fields  mapping the field
        # name to the current value of the field
        return { field.name: field.value_to_string(self)
                 for field in ImportProfile._meta.fields }


# Data Selection Profiles
class DataSelectionProfile(models.Model):
    entity      = models.CharField( max_length = 60, unique=True )
    value       = models.CharField( max_length = 70 )

    class Meta:
        ordering = ["entity"]

    def __unicode__(self):
        # create a unicode representation of this object
        return self.entity

    def get_value_array(self):
        # make an associative array of all fields  mapping the field
        # name to the current value of the field
        return { field.name: field.value_to_string(self)
                 for field in DataSelectionProfile._meta.fields }


# Classification Profiles
class ClassificationProfile(models.Model):
    entity      = models.CharField( max_length = 60, unique=True )
    value       = models.CharField( max_length = 70 )

    class Meta:
        ordering = ["entity"]

    def __unicode__(self):
        # create a unicode representation of this object
        return self.entity

    def get_value_array(self):
        # make an associative array of all fields  mapping the field
        # name to the current value of the field
        return { field.name: field.value_to_string(self)
                 for field in ClassificationProfile._meta.fields }


